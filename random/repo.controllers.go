package random

type InsertCountryRequestParams struct {
        Country models.Country
    }
type InsertCountryResponseParams struct {
        Country models.Country
    }



    // InsertCountry adds a row to the countries table
    // If no id is passed in, one will be autogenerated

    //encore:api auth method=POST
    func InsertCountry(ctx context.Context, c *InsertCountryRequestParams) (*InsertCountryResponseParams, error) {
        
        
        if c.Updated.IsZero() {
            c.Updated = time.Now()
            c.Created = time.Now()
        }
        

        
        if c.Id == uuid.Nil {
            newId, _ = uuid.NewV4()
            c.Id = newId
            slog.Info("replaced null id", "new id", c.Id)
        }
        

        // Initializing transaction
        tx, err := sqldb.Begin(ctx)
        if err != nil {
            return nil, &errs.Error{Code: errs.Internal, Message: "Could not initialize SQL transaction"}
        } 
        defer tx.Rollback()

        // Executing insertion by calling repository layer
        err = repository.InsertCountry(ctx, tx, c)
        if err != nil {
            return nil, &errs.Error{Code: errs.Internal, Message: "Could not insert Country"}
        }


        // Committing transaction
        err = tx.Commit()
         if err != nil {
            return nil, &errs.Error{Code: errs.Internal, Message: "Could not commit SQL transaction"}
        } 

        response := c

        return &response, nil

    }


    