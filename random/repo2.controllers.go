package random

type InsertCompanySegmentRequestParams struct {
        CompanySegment models.CompanySegment
    }
type InsertCompanySegmentResponseParams struct {
        CompanySegment models.CompanySegment
    }



    // InsertCompanySegment adds a row to the company_segments table
    // If no id is passed in, one will be autogenerated

    //encore:api auth method=POST
    func InsertCompanySegment(ctx context.Context, cs *InsertCompanySegmentRequestParams) (*InsertCompanySegmentResponseParams, error) {
        
        
        if cs.Updated.IsZero() {
            cs.Updated = time.Now()
            cs.Created = time.Now()
        }
        

        
        if cs.Id == uuid.Nil {
            newId, _ = uuid.NewV4()
            cs.Id = newId
            slog.Info("replaced null id", "new id", cs.Id)
        }
        

        // Initializing transaction
        tx, err := sqldb.Begin(ctx)
        if err != nil {
            return nil, &errs.Error{Code: errs.Internal, Message: "Could not initialize SQL transaction"}
        } 
        defer tx.Rollback()

        // Executing insertion by calling repository layer
        err = repository.InsertCompanySegment(ctx, tx, cs)
        if err != nil {
            return nil, &errs.Error{Code: errs.Internal, Message: "Could not insert CompanySegment"}
        }


        // Committing transaction
        err = tx.Commit()
         if err != nil {
            return nil, &errs.Error{Code: errs.Internal, Message: "Could not commit SQL transaction"}
        } 

        response := cs

        return &response, nil

    }


    