from models import *
from structs import *
from utils import *

def generateControllerInsert(struct_name, table_name, initials, table_dict, access, table):

    # Adding struct def for request params
    function_string = generateRequestParams(struct_name, table_dict, "Insert", table) + "\n"
    # Adding struct def for response params
    function_string += generateResponseParams(struct_name, table_dict, "Insert", table) + "\n"

    function_string += f"""\n\n
    // Insert{struct_name} adds a row to the {table_name} table
    // If no id is passed in, one will be autogenerated

    //encore:api {access} method=POST
    func Insert{struct_name}(ctx context.Context, {initials} *Insert{struct_name}RequestParams) (*Insert{struct_name}ResponseParams, error) {{
        
        {insertionTime(table_dict, initials)}

        {nullIDCheck(table_dict, initials)}

        // Initializing transaction
        tx, err := sqldb.Begin(ctx)
        if err != nil {{
            return nil, &errs.Error{{Code: errs.Internal, Message: "Could not initialize SQL transaction"}}
        }} 
        defer tx.Rollback()

        // Executing insertion by calling repository layer
        err = repository.Insert{struct_name}(ctx, tx, {initials})
        if err != nil {{
            return nil, &errs.Error{{Code: errs.Internal, Message: "Could not insert {struct_name}"}}
        }}


        // Committing transaction
        err = tx.Commit()
         if err != nil {{
            return nil, &errs.Error{{Code: errs.Internal, Message: "Could not commit SQL transaction"}}
        }} 

        response := {initials}

        return &response, nil

    }}\n\n
    """

    return function_string

def generateControllerRetrieval(struct_name, table_name, initials, table_dict, access, table):

    return

def generateControllerUpdate(struct_name, table_name, initials, table_dict, access, table):

    return

def generateControllerDelete(struct_name, table_name, initials, table_dict, access, table):

    return

def createControllerFile(table, package_name, access):

    out_file = ""

    table_name = f"{table['name'].strip()}"
    multi_name = f"{getMultiName(table_name)}"

    table_dict = getTable(table['columns'])

    # Creating the main struct
    struct_name = table_name.title().replace("_","")
    struct_name = cleanStructName(struct_name)

    # Getting initials for simplified endpoint creation
    initials = re.sub('[^A-Z]', '', struct_name).lower()


    # Adding the insertion endpoint
    out_file += generateControllerInsert(struct_name, table_name, initials, table_dict, access, table)

    return out_file
    
